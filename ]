#!/usr/bin/env python3
import tkinter as tk
import os
import yaml
from PIL import ImageTk, Image, ImageFont, ImageDraw
from screeninfo import get_monitors
import fontconfig as fc
import numpy as np

def init():
    global root, rootWidth, rootHeight, mainText, textFrame, logoBox, leftLogo, rightLogo, theme, order, textStore, blanked, monitors
    monitors = get_monitors()
    root = tk.Toplevel()
    root.geometry(str(monitors[1].width)+"x"+str( monitors[1].height)+"+"+str(monitors[0].width)+"+"+"0")
    rootHeight = monitors[1].height
    rootWidth = monitors[1].width
    height = rootHeight
    width = rotWidth
    textFrame = tk.Frame(root, width=rootWidth, height=rootHeight*0.75, background='black')
    mainText = tk.Text(textFrame)
    logoBox = tk.Frame(root, width=rootWidth, height=rootHeight*0.25, background='black')
    logoBox.pack_propagate(0)
    leftLogo = tk.Label(logoBox, border=0, background='black')
    rightLogo = tk.Label(logoBox, border=0, background='black')
    textFrame.pack(expand=True, fill='both', side=tk.TOP)
    textStore = ""
    blanked = False

def getThemeData():
    global mainText, leftLogo, rightLogo, themeName, img_pil, baseImg
    with open(os.path.join(os.getcwd(),"config.yml"), 'r') as ymlfile:
        cfg = yaml.load(ymlfile)
    themeName = cfg['theme']
    with open(os.getcwd()+"/themes/"+themeName+".yml") as ymlfile1:
        theme = yaml.load(ymlfile1)
    img = np.zeros((height,width,3),np.uint8)
    img_pil = Image.fromarray(img)
    fontfamily = theme['font']
    fonts = fc.query(family=fontfamily,lang='en')
    for i in range(1, len(fonts)):
        if fonts[i].fontformat == 'TrueType':
            fontpath = fonts[i].file
            break
    font = ImageFont.truetype(fontpath, theme['fontSize'])
    mainText.config(background=theme['bgColour'], borderwidth=0, highlightthickness=0)
    mainText.tag_configure('main', justify='center', background=theme['bgColour'], foreground=theme['fgColour'], font=(theme['font'], theme['fontSize']), spacing1=30, wrap='word')
    if theme['leftImg'] != 'none':
        leftImgPath = os.getcwd()+"/logos/"+theme['leftImg']+".png"
        with Image.open(leftImgPath) as leftImg0:
            [limageSizeWidth, limageSizeHeight] = leftImg0.size
            leftRatio = (rootHeight*0.25)/limageSizeHeight
            leftImg0 = leftImg0.resize((int(leftRatio*limageSizeWidth), int(leftRatio*limageSizeHeight)), Image.ANTIALIAS)
            leftImg = ImageTk.PhotoImage(leftImg0)
            leftLogo.config(image=leftImg)
            leftLogo.image=leftImg
            img_pil.paste(leftImg0, (0,int(height*0.75)), leftImg0)
            leftImg0.close()

    if theme['rightImg'] != 'none':
        rightImgPath = os.getcwd()+"/logos/"+theme['rightImg']+".png"
        rightImg0 = Image.open(rightImgPath)
        [rimageSizeWidth, rimageSizeHeight] = rightImg0.size
        rightRatio = (rootHeight*0.25)/rimageSizeHeight
        rightImg0 = rightImg0.resize((int(rightRatio*rimageSizeWidth), int(rightRatio*rimageSizeHeight)), Image.ANTIALIAS)
        rightImg = ImageTk.PhotoImage(rightImg0)
        rightLogo.config(image=rightImg)
        rightLogo.image=rightImg
        img_pil.paste(rightImg0, (int(width-rimageSizeWidth*rightRatio),int(height*0.75)))
    mainText.pack(expand=True, fill='both', pady=20)
    logoBox.pack(expand=False, fill=tk.X, side=tk.BOTTOM)
    leftLogo.pack(side=tk.LEFT, fill=tk.Y, expand=False)
    rightLogo.pack(side=tk.RIGHT, fill=tk.Y, expand=False)
    baseImg = img_pil

def updateText(text):
    global mainText, textStore, blanked, img_pil, baseImg
    mainText.delete('1.0', tk.END)
    if not blanked:
        mainText.insert(tk.END, text, 'main')
        lines = text.split("\n")
        img_pil = baseImg
        draw = ImageDraw.Draw(img_pil)
        cHeight = topGap
        for line in lines:
            w,h = font.getsize(line)
            draw.text(((width-w)/2,cHeight),line, font=font)
            cHeight += h+pad
    textStore = text

def blankText():
    global mainText, img_pil, baseImg
    mainText.delete('1.0', tk.END)
    img_pil = baseImg

def mainLoop():
    global root
    root.mainloop()

def unBlank():
    global mainText, textStore
    updateText(textStore)

def toggleBlanked():
    global blanked
    if blanked:
        blanked = False
        unBlank()
    else:
        blanked = True
        blankText()

